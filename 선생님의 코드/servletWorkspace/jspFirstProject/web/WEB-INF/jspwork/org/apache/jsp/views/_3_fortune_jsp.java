/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2018-05-30 12:10:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.Date;
import java.util.ArrayList;

public final class _3_fortune_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/views/2.today.jsp", Long.valueOf(1527670894576L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>오늘의 운세</title>\r\n");

	//Date date = new Date();
	//String str3 = String.format("%tY년 %tm월 %td일", date, date, date);

      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \tXXXX년 XX월 XX일 오늘의 운세 -->\r\n");
      out.write("\t<p>오늘의 운세</p>\r\n");
      out.write("\t<select>\r\n");
      out.write("\t\t<option value=\"1\">쥐띠</option>\r\n");
      out.write("\t\t<option value=\"2\">소띠</option>\r\n");
      out.write("\t\t<option value=\"3\">호랑이띠</option>\r\n");
      out.write("\t\t<option value=\"4\">토끼띠</option>\r\n");
      out.write("\t\t<option value=\"5\">용띠</option>\r\n");
      out.write("\t\t<option value=\"6\">뱀띠</option>\r\n");
      out.write("\t\t<option value=\"7\">말띠</option>\r\n");
      out.write("\t\t<option value=\"8\">양띠</option>\r\n");
      out.write("\t\t<option value=\"9\">원숭이띠</option>\r\n");
      out.write("\t\t<option value=\"10\">닭띠</option>\r\n");
      out.write("\t\t<option value=\"11\">개띠</option>\r\n");
      out.write("\t\t<option value=\"12\">돼지띠</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<!-- include : 현재 페이지에 해당 파일(서블릿)을 추가 한다.\r\n");
      out.write("\t스크립틀릿, 선언문 에서 변수 및 메소드 중복 선언 불가-->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>현재 시간 출력</title>\r\n");

	Date date = new Date();
	
	String str1 = String.format("%tF", date);
	String str2 = String.format("%tp %tT", date, date);
	String str3 = String.format("%tY년 %tm월 %td일 %tA", date, date, date, date);
	/*
	날짜  타입  format  ||               설명
	------------------------------------------------
	%tF						    날짜를 yyyy-mm-dd 형식으로 포맷
	%tT							날짜의 시각을 HH:MM:SS 형식으로 포맷.
	------------------------------------------------------
	%tY							4자리 년도만 출력 
	%ty							2자리 년도
	%tB							월의 이름(January, February, March...)
	%tm							월을 01,02,03 ~12 로 출력
	%td							일수를 1~31 로 출력
	%te							%td 와 같음.
	%tA							요일명 출력
	---------------------------------------------------
	%tp							오전, 오후를 출력
	%tk							시간을 0~23 으로 출력.
	%tl							시간을 1~12 로 출력.
	%tM							분을 00 ~59 로 출력.
	%tS							초를 00 ~ 59 로 출력.
	-----------------------------------------------------
	%tZ							타임존을 출력 (한국은 KST)
	---------------------------------------------------
	*/

      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t\t<li>오늘의 날짜 : ");
      out.print(str1);
      out.write("</li>\r\n");
      out.write("\t\t<li>현재 시간 : ");
      out.print(str2);
      out.write("</li>\r\n");
      out.write("\t\t<li>오늘은 ");
      out.print(str3 );
      out.write(" 입니다.</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
