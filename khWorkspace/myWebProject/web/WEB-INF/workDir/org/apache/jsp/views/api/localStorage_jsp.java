/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.52
 * Generated at: 2018-06-25 08:08:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class localStorage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>localStorage</title>\n");
      out.write("<script type=\"text/javascript\" src=\"/mwp/js/jquery-3.3.1.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("\t$(function(){\n");
      out.write("\t\t$(\"#setItemBtn\").click(function(){\n");
      out.write("\t\t\tif(null != localStorage){\n");
      out.write("\t\t\t\tconsole.log(\"로컬 스토리지 지원 브라우저 입니다.\");\n");
      out.write("\t\t\t}else{\n");
      out.write("\t\t\t\tconsole.log(\"로컬 스토리지를 지원하지 않습니다.\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tvar key = $(\"#itemKey\").val();\n");
      out.write("\t\t\tvar value = $(\"#itemValue\").val();\n");
      out.write("\t\t\tlocalStorage.setItem(key, value);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t$(\"#outputBtn\").click(function(){\n");
      out.write("\t\t\tvar key = $(\"#outputKey\").val();\n");
      out.write("\t\t\tvar text = localStorage.getItem(key);\n");
      out.write("\t\t\talert(text);\n");
      out.write("\t\t\tconsole.log(key, text);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t$(\"#removeBtn\").click(function(){\n");
      out.write("\t\t\tvar key = $(\"#removeKey\").val();\n");
      out.write("\t\t\tlocalStorage.removeItem(key);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t$(\"#clearBtn\").click(function(){\n");
      out.write("\t\t\tlocalStorage.clear();\n");
      out.write("\t\t\tconsole.log(localStorage);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t})\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h1>로컬 스토리지</h1>\n");
      out.write("\t<p>기존의 쿠기와 같은 방식으로 사용자 PC에 데이터 저장</p>\n");
      out.write("\t<p>저장 가능 공간 : 2.5MB~10MB, 갯수 제한이 없다, 값 계속 유지 된다.</p>\n");
      out.write("\t\n");
      out.write("\t<h3>로컬스토리지 항목 추가</h3>\n");
      out.write("\t설정 키 : <input type=\"text\" id=\"itemKey\"/><br>\n");
      out.write("\t설정 값 : <input type=\"text\" id=\"itemValue\"/><br>\n");
      out.write("\t<button id=\"setItemBtn\">값 설정</button>\n");
      out.write("\t<br>\n");
      out.write("\t\n");
      out.write("\t<h3>로컬스토리지 항목 확인</h3>\n");
      out.write("\t키 : <input type=\"text\" id=\"outputKey\"/> \n");
      out.write("\t<button id=\"outputBtn\">값 확인</button>\n");
      out.write("\t<br>\n");
      out.write("\t\n");
      out.write("\t<h3>로컬 스토리지 항목 삭제 </h3>\n");
      out.write("\t키 : <input type=\"text\" id=\"removeKey\">\n");
      out.write("\t<button id=\"removeBtn\">값 삭제</button>\n");
      out.write("\t<button id=\"clearBtn\">로컬스토리지 전체 삭제</button>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<a href=\"sessionStorage.jsp\">세션 스토리지 페이지 이동</a>\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
